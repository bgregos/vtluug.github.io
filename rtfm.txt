This document describes how to build the infrastructure from scratch, as well manage it in general. 

'SCRIPTS' refers to the scripts repo, found at https://github.com/vtluug/scripts
'ANSIBLE' refers to the ansible repo, found at https://github.com/vtluug/ansible

You need both to setup infra, also install 'ansible'.


Table of Contents
1. Installation
2. Networking
3. Configuration



Installation
============

All Hosts
- Set static ip and gateway as indicated in SCRIPTS/router/lan/local_hosts, and set the subnet mask to 255.255.0.0

Proxmox Hosts
- Use vtluug+notifications@gmail.com for the email address requested at installation

Non-Proxmox Hosts
- Create an admin user that is *not* the same as your ldap username


If any hosts are installed without internet connection, make sure you install & enable ssh, and install python internet works.

More configuration will be done in the 'Configuration' section after Networking



Networking
==========
- Set up physical boxes based on architecture_pic.png TODO
- Determine the ip addresses based on file_from_scripts_repo.txt


Switch
------
- Ensure IGMP multicast querying & snooping are enabled. Test it here: https://pve.proxmox.com/wiki/Multicast_notes#Using_omping_to_test_multicast
    - This is required for the Proxmox cluster


Router (Debian)
---------------

Configure IP addresses
- Copy SCRIPTS/router/ip-config/interfaces into /etc/network/interfaces

Configure ARP Proxying
- Copy SCRIPTS/router/proxy/arp_proxy.sh into /usr/local/bin/
- Copy SCRIPTS/router/proxy/arp_proxy.service into /etc/systemd/system
- Start and enable arp_proxy.service

Configure dnsmasq (DHCP/DNS) & resolv.conf
- Install dnsmasq
- Copy SCRIPTS/router/lan/dnsmasq.conf into /etc/dnsmasq.conf
- Copy SCRIPTS/router/lan/local_hosts into /usr/local/bin
- Copy SCRIPTS/router/lan/resolv.conf into /etc/resolv.conf
- Start and enable dnsmasq.service

Configure iptables (NAT/Firewall)
- Install iptables
- Copy SCRIPTS/router/lan/vtluug_iptables.sh into /usr/local/bin
- Copy SCRIPTS/router/lan/vtluug_iptables.service into /etc/systemd/system
- Start and enable vtluug_iptables.service



Configuration
=============
These steps MUST be done in order. YMMV otherwise.

Proxmox Hosts
- Create an admin user with sudo privileges, *not* using the same username as your ldap username
- Create the cluster following this guide: https://pve.proxmox.com/wiki/Cluster_Manager
- If you use firefox and a touchscreen you must disable 'dom.w3c_touch_events.enabled' in about:config for the Proxmox web GUI to work on your device
    - Yeah, it's stupid; get over it

**At this point, all bare metal hosts should have an admin user created, so root ssh will be disabled in the following step


Baremetal Hosts
- Run 'ansible-playbook main.yml -i hosts.cfg -K -u <admin-user> --limit=baremetal'
    - Configures most things and sets NFS exports, but the ZFS pools still need to be made a few other things need to be done manually as well

Proxmox Hosts
- Ansible configured most of postfix, but auth still needs to be configured
- On each Proxmox host, put 'smtp.gmail.com:587 vtluug.notifications@gmail.com:<password>' in /etc/postfix/sasl_passwd
    - The password can be found in the private accounts repo
- Run 'postmap /etc/postfix/sasl_passwd' then 'rm /etc/postfix/sasl_passwd'
- Restart postfix
- Verify email is working properly: 'echo test | mail -s testing you@email.com' and look in /var/log/mail.log for errors

Nfs-backup (shellshock AND cyberdelia)
- Shellshock - 3 500GB drives in a raidz2 zfs pool named 'keg'
    - To build the zfs pool, first look up the device ids in /dev/disk/by-id since these are guaranteed to not change (unlike /dev/sdX)
    - Run 'zpool create -f -o ashift=12 keg raidz1 <disk_1_id> <disk_2_id> <disk_3_id>
    - Create the following directories by running 'zfs create <directory>':
        - keg/nfs
        - keg/nfs/backup
        - keg/nfs/scratch
- Cyberdelia - 7 1TB drives in a raidz3 zfs pool named 'tank'
    - Similarly, run 'zpool create -f -o ashift=12 keg raidz2 <disk_1_id> <disk_2_id> ... <disk_7_id>
    - Create the following directories by running 'zfs create <directory>':
        - tank/nfs
        - tank/nfs/backup
        - tank/nfs/scratch

Nfs-main (dirtycow)
- Dirtycow - 8 2TB drives in a raidz3 pool named 'cistern'
    - Similarly, run 'zpool create -f -o ashift=12 keg raidz2 <disk_1_id> <disk_2_id> ... <disk_8_id>
    - Create the following directories by running 'zfs create <directory>':
        - TODO

